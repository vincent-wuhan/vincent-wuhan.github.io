<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JiangX</title>
    <link>https://vincent-wuhan.github.io/</link>
    <description>Recent content on JiangX</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Jun 2020 13:44:04 +0800</lastBuildDate>
    
	<atom:link href="https://vincent-wuhan.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>微服务介绍</title>
      <link>https://vincent-wuhan.github.io/msb/microservice_introduce/</link>
      <pubDate>Mon, 01 Jun 2020 13:44:04 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/msb/microservice_introduce/</guid>
      <description>img{ width: 80%; padding-left: 0%; }   微服务简介  微服务架构演进 单体架构  三层架构的演变 三层架构 三层架构优势 单体架构应用 单体架构优缺点  SOA(面向服务架构) 微服务架构  什么是微服务架构 微服务本质 微服务架构带来的问题  微服务相关技术  微服务之服务监控 微服务之链路跟踪 微服务之日志分析 微服务之API Gateway 微服务之降级、熔断、限流  微服务架构设计模式  聚合器微服务设计模式 代理微服务设计模式 链式微服务设计模式 分支微服务设计模式 数据共享微服务设计模式 异步消息传递微服务设计模式 微服务部署  部署要求 部署粒度 解决方案  典型微服务框架介绍  SpringCloud Dubbo gRPC   联系方式 参考   微服务简介 微服务架构演进 单体架构 三层架构的演变  一层架构  &amp;gt;面向过程的设计印记较重,所有逻辑代码无明显区别,代码间调用相互交错,错综复杂.</description>
    </item>
    
    <item>
      <title>Docker容器健康检查实现方法</title>
      <link>https://vincent-wuhan.github.io/docker/docker_health_check/</link>
      <pubDate>Fri, 22 May 2020 07:52:27 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/docker/docker_health_check/</guid>
      <description>Docker原生健康检查 Dockerfile健康检查 Docker自1.12版本后,支持健康检查指令HEALTHCHECK.
HEALTHCHECK指令格式:
 HEALTHCHECK [OPTION] CMD &amp;lt;命令&amp;gt; 设置检查容器健康状态命令 HEALTHCHECK NONE 关闭基础镜像原有健康检查指令  HEALTHCHECK选项:
 &amp;ndash;interval=&amp;lt;时间&amp;gt; 健康检查间隔时间,默认30秒 &amp;ndash;timeout=&amp;lt;时间&amp;gt; 健康检查命令超时时间,超时则视为健康检查失败,默认30秒 &amp;ndash;retries=&amp;lt;间隔&amp;gt; 连续检查失败次数后,视容器unhealthy,默认3次 &amp;ndash;start-period=&amp;lt;间隔&amp;gt; 应用的启动初始化时间,在启动过程中的健康检查失效不计入,默认0秒(docker 17.05以上支持)  HEALTHCHECK [OPTION] CMD后面的命令格式和ENTRYPOINT一样,分为shell和exec格式.
命令的返回值:
 0 成功 1 失败 2 保留字段  使用HEALTHCHECK指令构建的镜像,启动容器后会根据健康状态命令完成容器健康检查.
Dockerfile举例:
FROM elasticsearch:5.5 HEALTHCHECK --interval=5s --timeout=2s --retries=10 \ CMD curl --silent --fail localhost:9200/_cluster/health || exit 1  Docker命令健康检查 Docker命令使用--health-cmd指明健康检查策略
docker rm -rm -d \ --name=tomcat --health-cmd=&amp;quot;curl --silent --fail localhost:9200/_cluster/health || exit 1&amp;quot; \ --health-interval=5s \ --health-retries=12 \ --health-timeout=2s \ elasticsearch:5.</description>
    </item>
    
    <item>
      <title>Keepalived非抢占模式设置守护进程</title>
      <link>https://vincent-wuhan.github.io/keepalived/keepalived_daemon/</link>
      <pubDate>Thu, 21 May 2020 08:18:32 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/keepalived/keepalived_daemon/</guid>
      <description> Keepalived </description>
    </item>
    
    <item>
      <title>Haproxy Http模式健康检查配置</title>
      <link>https://vincent-wuhan.github.io/haproxy/haproxy-healthy-check/</link>
      <pubDate>Wed, 20 May 2020 08:07:31 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/haproxy/haproxy-healthy-check/</guid>
      <description>img{ width: 100%; }  需求 Haproxy是一款提供高可用、负载均衡以及基于TCP(四层)和HTTP(七层)应用的代理软件.在实际生产中,需要往往需要感知代理服务后端的可服务性将发送到Haproxy前端的请求转发后端处理,通过Haproxy健康检查的设置,可以快速检查服务的健康状态,从而做出正确的请求转发.
方法 设置Haproxy配置文件,/etc/haproxy/haproxy.cfg
frontend http_fd # 前端入口 bind 10.10.10.15:8181 use_backend http_bds backend http_bds # 在使用cookie定向时,一旦后端某server宕机,会将会话重定向到其他可用服务器 option redispatch # 健康检查, 向后端服务发送Get请求, URI 后端服务IP:8181/healthy option httpchk GET /healthy # 检查返回状态码,200表示健康 http-check expect status 200 # 间隔5s检查一次,2次成功服务up,3次失败服务down server bd-1 10.10.10.11:8181 check inter 5s rise 2 fall 3 server bd-2 10.10.10.12:8181 check inter 5s rise 2 fall 3 server bd-3 10.10.10.13:8181 check inter 5s rise 2 fall 3  效果  检查到后端异常,服务状态从up切换为down   3次检查失败后,服务状态down  服务恢复时,检测到服务恢复尝试切换服务down切up</description>
    </item>
    
    <item>
      <title>Git合并冲突问题处理</title>
      <link>https://vincent-wuhan.github.io/tools/git_merge_conflict_fixed/</link>
      <pubDate>Wed, 22 Apr 2020 16:36:38 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/tools/git_merge_conflict_fixed/</guid>
      <description>Gitlab分支合并请求冲突问题解决方法  问题  Gitlab上多个开发分支并行开发时,难免出现gitlab平台无法自动合入目标分支的情形,此时需要手动合并.
例如:
gitlab分支: remotes/origin/master remotes/origin/dev/A dev/A合入master时自动合并失败   解决方法   本地checkout出该待合并的开发分支dev/A
git checkout -b dev/A remotes/origin/dev/A  本地开发分支合并目标分支,并手动修改冲突
git merge --no-ff origin/master  合并后的分支重新提交待合并的开发分支
git push origin dev/A  Gitlab重新处理合并请求,完成合并</description>
    </item>
    
    <item>
      <title>Heat使用技巧记录</title>
      <link>https://vincent-wuhan.github.io/openstack/heat_funcs/</link>
      <pubDate>Sun, 05 Apr 2020 13:05:35 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/openstack/heat_funcs/</guid>
      <description>heat常用技巧  heat用户自定配置 heat内部函数  参考  heat常用技巧 heat用户自定配置  user_data  作用： 用户自定义脚本注入 语法：
VM: type: OS::Nova::Server user_data_format: RAW user_data: | #!/bin/bash &amp;lt;command-1&amp;gt; &amp;lt;command-2&amp;gt;  高级用法：结合heat内部函数str_replace和get_param完成参数化自定义 示例：
parameters: command1: type: string command2: type: string opt1: type: string opt2: type: string VM: type: OS::Nova::Server user_data_format: RAW user_data: str_replace: template: | #!bin/bash command_1 opt_1 command_2 opt_2 params: command_1: { get_param: command1 } command_2: { get_param: command2 } opt_1: { get_param: opt1 } opt_2: { get_param: opt2 }  输出结果为：</description>
    </item>
    
    <item>
      <title>Ovs 安装</title>
      <link>https://vincent-wuhan.github.io/tools/ovs-install/</link>
      <pubDate>Sun, 01 Mar 2020 20:37:31 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/tools/ovs-install/</guid>
      <description> 移除bridge rmmod bridge
 关闭bridge模块。可先通过lsmod | grep bridge 查看，然后用rmmod bridge关闭，若出现bridge正在被另一模块使用导致无法关闭的错误，则需要先关闭正在使用bridge的模块。
 安装OVS apt-get install openvswitch-switch
 查看安装结果 ovs-vsctl show
  </description>
    </item>
    
    <item>
      <title>Elasticsearch学习笔记</title>
      <link>https://vincent-wuhan.github.io/elk/elasticsearch-base/</link>
      <pubDate>Sun, 01 Mar 2020 14:27:26 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/elk/elasticsearch-base/</guid>
      <description>索引 分片 集群状态 文档 元数据 操作  索引 保存数据的地方，指向一个或多个物理分片的逻辑命名空间
分片 · Elasticsearch底层工作单元，仅保存全部数据中的一部分 · Elasticsearch利用分片将数据分发到集群各处，分片是数据的容器，文档保存在分片内，分片由被分配到集群内的各个节点上 · 当集群规模扩大或缩小时，Elasticsearch会自动在各节点中迁移分片，始终使数据均匀分布在集群内 · 分片有主分片和副分片之分，但索引内任意一个文档都会归属一个主分片 · 主分片的数量决定了索引能保存的最大数据量 · 副分片只是主分片的拷贝，用于数据冗余保护备份，但也提供搜索和返回文档的服务 · 分片是一个Lucene的实例，是一个完整的搜索引擎 · 文档被存储和索引到分片内，但应用程序是直接与索引交互而不是与分片交互
总结： 1.索引内数据是所有主分片内数据的合集 2.副分片是对所有主分片的数据拷贝和备份 3.所有分片始终作为数据的保存容器被均匀分布到Elasticsearch集群的各个节点 4.每个分片都能提供文档搜索和返回文档服务，但应用程序是直接与索引交互检索而不是与分片交互
集群状态 status 字段指示着当前集群在总体上是否工作正常。它的三种颜色含义如下：
green - 所有的主分片和副本分片都正常运行。 yellow - 所有的主分片都正常运行，但不是所有的副本分片都正常运行。 red - 有主分片没能正常运行。
文档 大多数应用中，多数实体或对象序列化为包含键值对的JSON对象。在Elasticsearch中，文档指最顶层或根对象，这个根对象呗序列化成JSON存储在Elasticsearch中，并指定了唯一ID
元数据 关于文档自身的信息 · _index 文档索引，通俗点讲就是文档在哪存放 · _type 文档表示的对象类别 · _id 文档唯一标识
操作  健康状态获取
curl -X GET &amp;quot;localhost:9200/_cluster/health&amp;quot;  索引建立与分片副本
  单节点上创建一个名为blogs的索引，分配个3个主分片和一份副本(每个朱分片拥有一个副本分片)</description>
    </item>
    
    <item>
      <title>Ansible Postgresql常用操作</title>
      <link>https://vincent-wuhan.github.io/ansible/ansible-postgresql-oper/</link>
      <pubDate>Sun, 01 Mar 2020 14:17:37 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/ansible/ansible-postgresql-oper/</guid>
      <description>背景 Ansible postgresql管理模块 Ansible Tower Postgres信息查询语句  获取客户机IP地址列表 获取部署仓库代码列表 获取仓库版本列表 获取仓库地址 获取仓库分支 获取客户机CPU信息 获取内存地址 获取客户机IP地址列表 获取客户机磁盘信息列表 获取客户机设备信息 获取硬盘大小 获取默认IPV4详情 获取默认IPV6详情   背景 最近应开发需求,使用Grafana面板进行AnsibleTower信息采集显示.Grafana数据采集源为AnsibleTower后台数据库Postgresql,开发过程中需要使用python的ansible开发库进行postgresql数据库的操作.涉及一些知识点记录下来,以备查看.
Ansible postgresql管理模块 postgresql_copy – Copy data between a file/program and a PostgreSQL table postgresql_db – Add or remove PostgreSQL databases from a remote host postgresql_ext – Add or remove PostgreSQL extensions from a database postgresql_idx – Create or drop indexes from a PostgreSQL database postgresql_info – Gather information about PostgreSQL servers postgresql_lang – Adds, removes or changes procedural languages with a PostgreSQL database postgresql_membership – Add or remove PostgreSQL roles from groups postgresql_owner – Change an owner of PostgreSQL database object postgresql_ping – Check remote PostgreSQL server availability postgresql_privs – Grant or revoke privileges on PostgreSQL database objects postgresql_publication – Add, update, or remove PostgreSQL publication postgresql_query – Run PostgreSQL queries postgresql_schema – Add or remove PostgreSQL schema postgresql_sequence – Create, drop, or alter a PostgreSQL sequence postgresql_set – Change a PostgreSQL server configuration parameter postgresql_slot – Add or remove replication slots from a PostgreSQL database postgresql_table – Create, drop, or modify a PostgreSQL table postgresql_tablespace – Add or remove PostgreSQL tablespaces from remote hosts postgresql_user – Add or remove a user (role) from a PostgreSQL server instance</description>
    </item>
    
    <item>
      <title>ONAP 离线安装</title>
      <link>https://vincent-wuhan.github.io/onap/onap-offline-install/</link>
      <pubDate>Sun, 01 Mar 2020 14:08:22 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/onap/onap-offline-install/</guid>
      <description>环境准备  硬件环境 软件条件  安装目录结构 安装前提 docker安装 文件服务器  nginx配置 文件服务器启动脚本  安装说明 docker镜像仓库  镜像仓库启动脚本 启动仓库  rancher安装 下载rancher.sh  安装rancher  k8s安装  下载k8s-node.sh 安装k8s  rancher&amp;amp;Kubernetes API  kubernetes template获取 rancher env添加 rancher host添加 kubectl token获取  helm私有仓库http服务器搭建 Chart仓库管理基础环境安装  helm安装helm-push插件 kubeapps要求  安装脚本 tiller需要获取超级权限 token获取   主动重启  重启前删除所有部署 启动后重新安装部署  Q&amp;amp;A TODO  环境准备 19年应公司需求做了一个ONAP离线安装的工具, 这里不细说代码,只说明实现框架
硬件环境    RAM HD vCores Ports     128G 160G 32 0.</description>
    </item>
    
    <item>
      <title>Maven笔记</title>
      <link>https://vincent-wuhan.github.io/java/maven-how-to/</link>
      <pubDate>Sun, 01 Mar 2020 14:06:08 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/java/maven-how-to/</guid>
      <description>常用命令 POM文件 Maven源设置  常用命令    命令 说明     mvn -version 查看maven的版本及配置信息   mvn archetype:create -DgroupId= DartifactId= 构建java项目   mvn archetype:create -DgroupId= DartifactId= -DarchetypeArtifactId=maven-archetype-webapp 创建web项目   mvn compile 编译项目代码   mvn package 打包项目   mvn package -Dmaven.test.skip=true 打包项目时跳过单元测试   mvn test 运行单元测试   mvn clean 清除编译产生的target文件夹内容，可以配合相应命令一起使用，如mvn clean package， mvn clean test   mvn install 打包后将其安装在本地仓库   mvn deploy 打包后将其安装到pom文件中配置的远程仓库   mvn eclipse:eclipse 将maven生成eclipse项目结构   mvn eclipse:clean 清除maven项目中eclipse的项目结构   mvn site 生成站点目录   mvn dependency:list 显示所有已经解析的所有依赖   mvn dependency:tree 以树的结构展示项目中的依赖   mvn dependency:analyze 对项目中的依赖进行分析，依赖未使用，使用单未引入   mvn tomcat:run 启动tomcat    POM文件 pom文件是maven中最重要的文件，以上命令的也需要根据pom文件进行运行。一般在构建完maven项目后需要修改pom文件添加诸如依赖关系，打包机制及一些项目的详细信息。一般的pom包含如下一些基本的信息： | 标签 | 说明| |:&amp;mdash;&amp;mdash;-|:&amp;mdash;| groupId|项目或者组织的唯一标志 artifactId|项目的名称 version|项目的版本 packaging|打包机制 name|用户描述项目的名称 url|应该是只是写明开发团队的网站</description>
    </item>
    
    <item>
      <title>Kubernetes微服务日志采集适配</title>
      <link>https://vincent-wuhan.github.io/kubernetes/kubernetes-logging-mgmt/</link>
      <pubDate>Sun, 01 Mar 2020 13:58:24 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/kubernetes/kubernetes-logging-mgmt/</guid>
      <description>日志采集方式 Filebeat sidecar安装方式  resources文件 oom改造(helm)   日志采集方式    采集方式 说明     原生方式 使用 kubectl logs 直接在查看本地保留的日志，或者通过docker engine的 log driver 把日志重定向到文件、syslog、fluentd等系统中。   DaemonSet方式 在K8S的每个node上部署日志agent，由agent采集所有容器的日志到服务端。   Sidecar方式 一个POD中运行一个sidecar的日志agent容器，用于采集该POD主容器产生的日志。    Filebeat sidecar安装方式 resources文件 · filebeat.yml——filebeat配置文件 · logback.xml——日志格式定义
oom改造(helm)  添加filebeat.yml配置文件  路径: oom/kubernetes//resources/config/log/filebeat/filebeat.yml
一个简单的filebeat.yml配置
filebeat.prospectors: #it is mandatory, in our case it&#39;s log - input_type: log #This is the canolical path as mentioned in logback.</description>
    </item>
    
    <item>
      <title>Linux常用技巧</title>
      <link>https://vincent-wuhan.github.io/linux/linux_skills/</link>
      <pubDate>Sun, 01 Mar 2020 13:53:30 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/linux/linux_skills/</guid>
      <description>查看磁盘大文件
du -sh /*  修改网卡名字（如eth0）
/etc/udev/rules.d/70-persistent-net.rules  Root远程登录设置
#!/bin/bash # setup root access - default login: oom/oom - comment out to restrict access too ssh key only sed -i &#39;s/PermitRootLogin.*/PermitRootLogin yes/&#39; /etc/ssh/sshd_config sed -i &#39;s/PasswordAuthentication.*/PasswordAuthentication yes/&#39; /etc/ssh/sshd_config service sshd restart echo -e &amp;quot;mano2018\nmano2018&amp;quot; | passwd root  Root用户密码设置
sudo passwd root  查看apt-get依赖包
  cd /var/cache/apt/archives
 添加用户到docker组  root@mano:~# gpasswd -a sdc docker Adding user sdc to group docker root@mano:~# newgrp docker</description>
    </item>
    
    <item>
      <title>Java Env搭建</title>
      <link>https://vincent-wuhan.github.io/java/java-env/</link>
      <pubDate>Sun, 01 Mar 2020 13:51:48 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/java/java-env/</guid>
      <description> 安装 在ubuntu中，java有两种版本，一种是开源版本OpenJDK，另外一种是Oracle版本，两者区别不大，知识Oracle的多了一些商业功能
安装
# 安装OpenJDK 10 JDK apt install default-jdk # 安装OpenJDK 8 JDK apt install openjdk-8-jdk # 安装Oracle JAVA # 1.添加新的存储库WebUpd8，可以自动下载并安装Oracle JDK apt install software-properities-common dirmngr add-apt-repository ppa:webupd8team/java apt update # 2.安装java8 apt-get install oracle-java8-installer  设置JAVA_HOME等参数, 打开~/.bashrc,末尾追加
export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64 export JRE_HOME=${JAVA_HOME}/jre export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib export PATH=${JAVA_HOME}/bin:$PATH  </description>
    </item>
    
    <item>
      <title>Kubernetes学习笔记</title>
      <link>https://vincent-wuhan.github.io/kubernetes/kubernetes-how-to-use/</link>
      <pubDate>Sun, 01 Mar 2020 13:49:47 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/kubernetes/kubernetes-how-to-use/</guid>
      <description>kubectl常用命令 “&amp;mdash;”的作用 Service类型 回滚设置 Health Check  容器默认健康检查 Liveness探测 Readiness探测  数据管理  emptyDir hostPath PV &amp;amp; PVC （PersistentVolume &amp;amp; PersistentVolumeClaim） Secret 作用 创建Secret 查看Secret Secret的使用 ConfigMap  常见问题  手动删除pods的步骤   kubectl常用命令 #异常pod捕获命令 kubectl get pods -n kube-system | grep -v Running # 查看目前所有的pod kubectl get po # 查看目前所有的replica set kubectl get rs # 查看目前所有的deployment kubectl get deployment # 查看my-nginx pod的详细状态 kubectl describe po my-nginx # 查看my-nginx replica set的详细状态 kubectl describe rs my-nginx # 查看my-nginx deployment的详细状态 kubectl describe deployment my-nginx # 查看相关事件 kubectl get eventskubectl get events kubectl delete deployment my-nginx  “&amp;mdash;”的作用 一个YAML中定义多个资源，用&amp;rdquo;&amp;mdash;&amp;ldquo;分割</description>
    </item>
    
    <item>
      <title>Helm学习笔记</title>
      <link>https://vincent-wuhan.github.io/kubernetes/helm-how-to-use/</link>
      <pubDate>Sun, 01 Mar 2020 13:46:41 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/kubernetes/helm-how-to-use/</guid>
      <description>基础知识 基本概念    关键词 说明     chart 创建一个应用的信息集合，包括各种Kubernetes对象的配置模板、参数定义、依赖关系、文档说明等。Chart是应用部署的自包含逻辑单元，可以将chart想象成apt、yum中的软件安装包   release chart的运行实例，代表了一个正在运行的应用。当chart被安装到Kubernetes集群，就生成一个release。chart能够多次安装到同一个集群，每次安装都是一个release    功能 · 从零创建新chart
· 与存储chart的仓库交互，拉取、保存和更新chart
· 在Kubernetes集群中安装和卸载release
· 更新、回滚和测试release
组件  Helm客户端  Helm命令行工具，支持用户进行如下操作
· 在本地开发chart · 管理chart仓库 · 与Tiller服务器交互 · 在远程Kubernetes集群上安装chart · 查看release信息 · 升级或卸载已有release   Tiller服务器  Tiller服务器运行在Kubernetes集群中。
常见命令    命令名称 说明     helm repo index REPO_PATH 本地仓库index创建    Q&amp;amp;A helm安装提示index.</description>
    </item>
    
    <item>
      <title>GitLab环境搭建</title>
      <link>https://vincent-wuhan.github.io/tools/gitlab_env_install/</link>
      <pubDate>Sun, 01 Mar 2020 13:10:41 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/tools/gitlab_env_install/</guid>
      <description>docker安装 gitlab安装 gitlab-runner安装 配置gitlab runner支持dind gitlab-ci dind gitlab常用配置 gitlab集成kubernetes gitlab-ci 中docker命令失败问题处理  docker安装  安装
apt-get install docker.io   gitlab安装  image   docker pull beginor/gitlab-ce:11.3.0-ce.0
  pre-run  gitlab外挂卷，用于保存gitlab平台的持久化存储配置(etc),日志(log),数据(data)
 sudo mkdir -p /mnt/sda1/gitlab/etc sudo mkdir -p /mnt/sda1/gitlab/log sudo mkdir -p /mnt/sda1/gitlab/data
  run
docker run \ --detach \ --publish 8443:443 \ --publish 8080:80 \ --name gitlab \ --restart unless-stopped \ --volume /mnt/sda1/gitlab/etc:/etc/gitlab \ --volume /mnt/sda1/gitlab/log:/var/log/gitlab \ --volume /mnt/sda1/gitlab/data:/var/opt/gitlab \ beginor/gitlab-ce:11.</description>
    </item>
    
    <item>
      <title>Git_cli</title>
      <link>https://vincent-wuhan.github.io/tools/git_cli/</link>
      <pubDate>Sun, 01 Mar 2020 13:00:48 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/tools/git_cli/</guid>
      <description>常用命令 典型应用场景  日志修改 Git review配置   常用命令    命令 说明     git config &amp;ndash;global core.editor vim 设置全局编辑器为vim   git config &amp;ndash;global user.name &amp;ldquo;user&amp;rdquo; 设置用户名   git config &amp;ndash;global user.email &amp;ldquo;user@email.com&amp;rdquo; 设置用户邮箱   git remote add gerrit http://user:password@10.10.10.10:8080/a/project.git 设置远程gerrit        典型应用场景 日志修改  修改最近一次   git commit &amp;ndash;amend
  修改历史中的某个记录   1.</description>
    </item>
    
    <item>
      <title>Common_skills</title>
      <link>https://vincent-wuhan.github.io/docker/common_skills/</link>
      <pubDate>Sun, 01 Mar 2020 12:55:00 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/docker/common_skills/</guid>
      <description>常用命令 Dockerfile  ADD路径说明 COPY路径说明  常见问题  常用命令  镜像导出   docker save 镜像:TAG &amp;gt; tar包名称
  镜像导入   docker load &amp;lt; tar包名称
  删除镜像    删除所有容器 docker rm docker ps -a -q 删除所有镜像 docker rmi docker images -q 删除没有打标签的镜像 docker rmi docker images -q | awk &#39;/^&amp;lt;none&amp;gt;/ { print $3 }&#39; 删除包含关键词的镜像 docker rmi &amp;ndash;force docker images | grep 关键词 | awk &#39;{print $3}&#39; 5.</description>
    </item>
    
    <item>
      <title>CentOS私有Yum源 Pip源搭建方法</title>
      <link>https://vincent-wuhan.github.io/linux/personal_software_sources/</link>
      <pubDate>Sun, 01 Mar 2020 12:50:22 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/linux/personal_software_sources/</guid>
      <description>本文档中所有操作默认采用ROOT权限操作 本文档中使用的变量列表如下
    变量 举例 说明     REPO_ROOT /home/centos/ 私有源服务器安装目录   YUM_REPO /home/centos/yumRepo yum私有仓库目录   PIP_REPO /home/centos/pipRepo pip私有仓库目录   SERVER_IP 172.30.0.24 私有源服务器地址   CLIENT_IP 172.30.0.10 客户测试机地址   YUM_PORT 10084 yum私有源服务器监听端口   PIP_PORT 10085 pip私有源服务器监听端口   RPM_SOFT_NAME docker-ce RPM软件包名   PIP_SOFT_NAME docker-compose PIP软件包名   PIP_SOFT_VERSION 1.24.0 PIP软件包版本   YUM_REPO_URL http://172.30.0.24:10084 私有YUM源地址   PIP_REPO_URL http://172.</description>
    </item>
    
    <item>
      <title>远程访问容器内postgresql数据库不通问题排查</title>
      <link>https://vincent-wuhan.github.io/docker/connect_postgresql_fail/</link>
      <pubDate>Sun, 01 Mar 2020 12:44:17 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/docker/connect_postgresql_fail/</guid>
      <description>需求场景 默认ansible-awx部署ansible-tower时，是不开放postgres端口5432映射到宿主机的。为了远程访问tower的数据库postgres，在部署完后，手动更改docker-compose文件，添加如下端口映射
ports: - &amp;quot;5432&amp;quot;:&amp;quot;5432&amp;quot;  然后在docker-compose文件同级目录下，重新执行命令更新容器
docker-compose up -d  期望结果 以宿主机IP为192.168.100.23, 容器IP地址为172.31.0.2为例，正常情况使用psql -h 192.168.100.23 -U awx可登陆postgres数据库
但此时却遇到一个坑，不知是否与docker-compose版本有关，在此记录备案.
现象说明 &amp;ldquo;psql -h localhost -U awx&amp;rdquo;和&amp;rdquo;psql -h 172.31.0.2 -U awx&amp;rdquo;可以登陆数据库成功，&amp;rdquo;psql -h 192.168.100.23 -U awx&amp;rdquo;登陆数据失败
问题排查过程  确认docker容器映射正常
# docker ps|grep awx-postgres $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES a0d0a4d205f0 postgres:10 &amp;quot;docker-entrypoint.s…&amp;quot; 7 seconds ago Up 6 seconds 0.0.0.0:5432-&amp;gt;5432/tcp awx_postgres   查看5432端口也被正常监听
# netstat -apn|grep 5432 tcp6 0 0 :::5432 :::* LISTEN 1650/docker-proxy # ps aux|grep 5432 root 1650 0.</description>
    </item>
    
    <item>
      <title>获取docker容器对应宿主机网络接口的方法</title>
      <link>https://vincent-wuhan.github.io/docker/get_container_host_nic/</link>
      <pubDate>Sun, 01 Mar 2020 11:48:43 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/docker/get_container_host_nic/</guid>
      <description>具体思路  查看容器内eth0的iflink接口索引
docker exec -it ${container_info} bash -c &#39;cat /sys/class/net/eth0/iflink&#39;   注： &amp;gt; container_info可以是docker容器名称或者docker容器id &amp;gt; 该命令返回一个iflink索引值，例如791
 搜索宿主机veth接口
grep -l 791 /sys/class/net/veth*/ifindex   注： &amp;gt; 该命令返回一个目录路径，”/sys/class/net/vethae7eed8/ifindex“
 截取目录路径中veth*部分的字符
sed -e &#39;s;^.*net/\(.*\)/ifindex$;\1   shell脚本 #!/bin/bash for container in $(docker ps -q) do iflink=`docker exec -it $container bash -c &#39;cat /sys/class/net/eth0/iflink&#39;` # 打印结果并删除windows文件造成的^M字符 # tr命令为翻译字符命令 iflink=`echo $iflink|tr -d &#39;\r&#39;` veth=`grep -l $iflink /sys/class/net/veth*/ifindex` veth=`echo $veth|sed -e &#39;s;^.*net/\(.*\)/ifindex$;\1;&#39;` echo $container:$veth done  压缩成一行,命令行中执行：</description>
    </item>
    
    <item>
      <title>如何pip下载和离线安装第三方包</title>
      <link>https://vincent-wuhan.github.io/tools/how-to-download-and-offline-install-pip-packing/</link>
      <pubDate>Tue, 04 Feb 2020 18:15:12 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/tools/how-to-download-and-offline-install-pip-packing/</guid>
      <description> PiP离线包下载安装说明 下载依赖包  PIP为存放离线包的路径，也是安装离线包时的仓库路径
  创建目录
mkdir -p PIP  下载离线pip包
pip download docker-py -d &amp;quot;PIP&amp;quot; -i https://pypi.tuna.tsinghua.edu.cn/simple/    -d 指定下载目录 -i 指定python源
 安装依赖包  拷贝离线包到指定Host 安装离线包   以要安装的pip包为docker-py为例
 pip install --no-index --find-links=/home/mano/docker-py/ docker-py   &amp;ndash;no-index忽略包索引 &amp;ndash;find-links仅从链接地址中寻找依赖 docker-py为安装的离线包
 </description>
    </item>
    
    <item>
      <title>hugo使用笔记</title>
      <link>https://vincent-wuhan.github.io/tools/how-to-use-hugo/</link>
      <pubDate>Fri, 31 Jan 2020 20:11:01 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/tools/how-to-use-hugo/</guid>
      <description>hugo博客设置  创建blog hugo new site blog  blog为博客存放目录
 创建博客文章  hugo new path/content.md
 本地预览  hugo server &amp;ndash;buildDrafts
 编译web格式预发布  hugo &amp;ndash;theme=m10c &amp;ndash;base-url=&amp;ldquo;http://vincnet-wuhan.github.io&amp;quot; &amp;ndash;buildDrafts
 编译生成的文件在blog下的public目录下
  发布到github  切换到public目录，初始化本地仓库
cd public git init git add . git commit -m &#39;message&#39; git remote add origin https://github.com/vincent-wuhan/vincent-wuhan.github.io.git git push -u origin master  博文写作  Markdown插入图片   config.toml中配置baseurl. 图片的路径是相对于baseurl而言 markdown图片存放路径跟目录为static  例如: baseurl为https://vincent-wuhan.github.io/,图片位置为/static/images/demo.png,markdown中图片写法如下:
![demo](/images/demo.png)   Markdown图片控制  在Markdown文章开头定义image样式,定义语法如下:</description>
    </item>
    
    <item>
      <title>有效提升Python代码质量的技巧</title>
      <link>https://vincent-wuhan.github.io/python/how-to-improve-python-skills/</link>
      <pubDate>Fri, 31 Jan 2020 19:40:27 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/python/how-to-improve-python-skills/</guid>
      <description>有效提升Python代码质量的20个技巧 推导式 推导式是构建列表、字典、集合和生成器便捷方式
 格式
[表达式 for 迭代变量 in 可迭代对象 if 条件]  举例
# 列表推导式 mylist = [i**2 for i in range(1,11) if i &amp;gt; 5] # 字典推导式 mydict = {i: i*i for i in range(1,6)} # 集合推导式 myset = {i for i in &#39;HarryPotter&#39; if i not in &#39;er&#39;} # 元组推导式要显示使用tuple()，不能直接使用() # ()被生成器占用了 # 生成器 mygenerator = (i for i in range(0,11)) print(mygenerator) print(list(mygenerator)) # 嵌套循环 mylist = [str(i) + j for i in range(1,6) for j in &#39;ABCDE&#39;] # 字典转列表 mydict = {&#39;key1&#39;: &#39;value1&#39;, &#39;key2&#39;: &#39;value2&#39;} mylist = [key + &#39;:&#39; + value for key, value in mydict.</description>
    </item>
    
    <item>
      <title>ONAP微服务之NFVO与VNFM两种部署模式</title>
      <link>https://vincent-wuhan.github.io/onap/msb/</link>
      <pubDate>Sat, 24 Aug 2019 17:17:38 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/onap/msb/</guid>
      <description>微服务 微服务路由 路由发现是微服务体系中一个重要组成，直白的讲，“路由”是指根据请求URL，把请求分配到对应的处理程序
从服务发现工作流程理解一次服务请求的过程  请求来之前需要服务提供者工作正常 服务提供者启动时，将服务名称、服务器地址注册到服务配置中心 服务消费者将请求发送给服务配置中心，服务配置中心根据请求URL获取匹配需要调度的服务机器列表 一次请求到来，经过路由分发定位到一组服务，再通过负载均衡算法后，选择一台服务器调用响应请求  负载均衡算法  轮询法，将请求按顺序轮流地分配到后端服务器上，它均衡地对待后端的每一台服务器，而不关心服务器实际的连接数和当前的系统负载 随机发，通过系统的随机算法，根据后端服务器的列表大小值来随机选取其中的一台服务器进行访问。由概率统计理论可以得知，随着客户端调用服务端的次数增多，其实际效果越来越接近于平均分配调用量到后端的每一台服务器，也就是轮询的结果 加权轮询法，不同的后端服务器可能机器的配置和当前系统的负载并不相同，因此它们的抗压能力也不相同。给配置高、负载低的机器配置更高的权重，让其处理更多的请；而配置低、负载高的机器，给其分配较低的权重，降低其系统负载，加权轮询能很好地处理这一问题，并将请求顺序且按照权重分配到后端 最小连接数法，最小连接数算法比较灵活和智能，由于后端服务器的配置不尽相同，对于请求的处理有快有慢，它是根据后端服务器当前的连接情况，动态地选取其中当前积压连接数最少的一台服务器来处理当前的请求，尽可能地提高后端服务的利用效率，将负责合理地分流到每一台服务器 源地址哈希法，源地址哈希的思想是根据获取客户端的IP地址，通过哈希函数计算得到的一个数值，用该数值对服务器列表的大小进行取模运算，得到的结果便是客服端要访问服务器的序号。采用源地址哈希法进行负载均衡，同一IP地址的客户端，当后端服务器列表不变时，它每次都会映射到同一台后端服务器进行访问  部署方式 NFVO和VNFM解耦部署 NFVO_SERVER（a_ip:a_port/nfvo_uri） |________________ | MSB(O_IP:O_PORT)========================== | MSB(M_IP:M_PORT)=============== |________ | VNFM_SERVER (c_ip:c_port/vnfm_uri)   参数说明     模块 说明     NFVO_SERVER O层微服务模块   VNFM_SERVER M层微服务模块   MSB(O_IP:O_PORT) O层微服务总线，O_IP为O层微服务总线IP地址，O_PORT为总线端口   MSB(M_IP:M_PORT) M层微服务总线，M_IP为M层微服务总线IP地址，M_PORT为总线端口   a_ip:a_port/nfvo_uri O层微服务模块提供的服务API内部url, a_ip为集群ip，外部不可访问   c_ip:c_port/vnfm_uri M层微服务模块提供的服务API内部url, c_ip为集群ip，外部不可访问   O_IP:O_PORT/nfvo_uri O层微服务API在O层MSB总线上暴露的访问URL   M_IP:M_PORT/vnfm_uri M层微服务API在M层MSB总线上暴露的访问URL         一条MSB上访问微服务内部api的转换过程  原理是，请求发送到微服务总线后，微服务总线根据请求uri在服务注册中心列表中查找匹配路由，然后将请求转发给找到的服务器地址处理</description>
    </item>
    
  </channel>
</rss>