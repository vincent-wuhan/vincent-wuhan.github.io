<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dockers on JiangX</title>
    <link>https://vincent-wuhan.github.io/docker/</link>
    <description>Recent content in Dockers on JiangX</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 22 May 2020 07:52:27 +0800</lastBuildDate>
    
	<atom:link href="https://vincent-wuhan.github.io/docker/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Docker容器健康检查实现方法</title>
      <link>https://vincent-wuhan.github.io/docker/docker_health_check/</link>
      <pubDate>Fri, 22 May 2020 07:52:27 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/docker/docker_health_check/</guid>
      <description>Docker原生健康检查 Dockerfile健康检查 Docker自1.12版本后,支持健康检查指令HEALTHCHECK.
HEALTHCHECK指令格式:
 HEALTHCHECK [OPTION] CMD &amp;lt;命令&amp;gt; 设置检查容器健康状态命令 HEALTHCHECK NONE 关闭基础镜像原有健康检查指令  HEALTHCHECK选项:
 &amp;ndash;interval=&amp;lt;时间&amp;gt; 健康检查间隔时间,默认30秒 &amp;ndash;timeout=&amp;lt;时间&amp;gt; 健康检查命令超时时间,超时则视为健康检查失败,默认30秒 &amp;ndash;retries=&amp;lt;间隔&amp;gt; 连续检查失败次数后,视容器unhealthy,默认3次 &amp;ndash;start-period=&amp;lt;间隔&amp;gt; 应用的启动初始化时间,在启动过程中的健康检查失效不计入,默认0秒(docker 17.05以上支持)  HEALTHCHECK [OPTION] CMD后面的命令格式和ENTRYPOINT一样,分为shell和exec格式.
命令的返回值:
 0 成功 1 失败 2 保留字段  使用HEALTHCHECK指令构建的镜像,启动容器后会根据健康状态命令完成容器健康检查.
Dockerfile举例:
FROM elasticsearch:5.5 HEALTHCHECK --interval=5s --timeout=2s --retries=10 \ CMD curl --silent --fail localhost:9200/_cluster/health || exit 1  Docker命令健康检查 Docker命令使用--health-cmd指明健康检查策略
docker rm -rm -d \ --name=tomcat --health-cmd=&amp;quot;curl --silent --fail localhost:9200/_cluster/health || exit 1&amp;quot; \ --health-interval=5s \ --health-retries=12 \ --health-timeout=2s \ elasticsearch:5.</description>
    </item>
    
    <item>
      <title>Common_skills</title>
      <link>https://vincent-wuhan.github.io/docker/common_skills/</link>
      <pubDate>Sun, 01 Mar 2020 12:55:00 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/docker/common_skills/</guid>
      <description>常用命令 Dockerfile  ADD路径说明 COPY路径说明  常见问题  常用命令  镜像导出   docker save 镜像:TAG &amp;gt; tar包名称
  镜像导入   docker load &amp;lt; tar包名称
  删除镜像    删除所有容器 docker rm docker ps -a -q 删除所有镜像 docker rmi docker images -q 删除没有打标签的镜像 docker rmi docker images -q | awk &#39;/^&amp;lt;none&amp;gt;/ { print $3 }&#39; 删除包含关键词的镜像 docker rmi &amp;ndash;force docker images | grep 关键词 | awk &#39;{print $3}&#39; 5.</description>
    </item>
    
    <item>
      <title>远程访问容器内postgresql数据库不通问题排查</title>
      <link>https://vincent-wuhan.github.io/docker/connect_postgresql_fail/</link>
      <pubDate>Sun, 01 Mar 2020 12:44:17 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/docker/connect_postgresql_fail/</guid>
      <description>需求场景 默认ansible-awx部署ansible-tower时，是不开放postgres端口5432映射到宿主机的。为了远程访问tower的数据库postgres，在部署完后，手动更改docker-compose文件，添加如下端口映射
ports: - &amp;quot;5432&amp;quot;:&amp;quot;5432&amp;quot;  然后在docker-compose文件同级目录下，重新执行命令更新容器
docker-compose up -d  期望结果 以宿主机IP为192.168.100.23, 容器IP地址为172.31.0.2为例，正常情况使用psql -h 192.168.100.23 -U awx可登陆postgres数据库
但此时却遇到一个坑，不知是否与docker-compose版本有关，在此记录备案.
现象说明 &amp;ldquo;psql -h localhost -U awx&amp;rdquo;和&amp;rdquo;psql -h 172.31.0.2 -U awx&amp;rdquo;可以登陆数据库成功，&amp;rdquo;psql -h 192.168.100.23 -U awx&amp;rdquo;登陆数据失败
问题排查过程  确认docker容器映射正常
# docker ps|grep awx-postgres $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES a0d0a4d205f0 postgres:10 &amp;quot;docker-entrypoint.s…&amp;quot; 7 seconds ago Up 6 seconds 0.0.0.0:5432-&amp;gt;5432/tcp awx_postgres   查看5432端口也被正常监听
# netstat -apn|grep 5432 tcp6 0 0 :::5432 :::* LISTEN 1650/docker-proxy # ps aux|grep 5432 root 1650 0.</description>
    </item>
    
    <item>
      <title>获取docker容器对应宿主机网络接口的方法</title>
      <link>https://vincent-wuhan.github.io/docker/get_container_host_nic/</link>
      <pubDate>Sun, 01 Mar 2020 11:48:43 +0800</pubDate>
      
      <guid>https://vincent-wuhan.github.io/docker/get_container_host_nic/</guid>
      <description>具体思路  查看容器内eth0的iflink接口索引
docker exec -it ${container_info} bash -c &#39;cat /sys/class/net/eth0/iflink&#39;   注： &amp;gt; container_info可以是docker容器名称或者docker容器id &amp;gt; 该命令返回一个iflink索引值，例如791
 搜索宿主机veth接口
grep -l 791 /sys/class/net/veth*/ifindex   注： &amp;gt; 该命令返回一个目录路径，”/sys/class/net/vethae7eed8/ifindex“
 截取目录路径中veth*部分的字符
sed -e &#39;s;^.*net/\(.*\)/ifindex$;\1   shell脚本 #!/bin/bash for container in $(docker ps -q) do iflink=`docker exec -it $container bash -c &#39;cat /sys/class/net/eth0/iflink&#39;` # 打印结果并删除windows文件造成的^M字符 # tr命令为翻译字符命令 iflink=`echo $iflink|tr -d &#39;\r&#39;` veth=`grep -l $iflink /sys/class/net/veth*/ifindex` veth=`echo $veth|sed -e &#39;s;^.*net/\(.*\)/ifindex$;\1;&#39;` echo $container:$veth done  压缩成一行,命令行中执行：</description>
    </item>
    
  </channel>
</rss>