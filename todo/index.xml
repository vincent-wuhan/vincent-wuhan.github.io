<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Todos on JiangX</title>
    <link>https://vincent-wuhan.github.io/todo/</link>
    <description>Recent content in Todos on JiangX</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://vincent-wuhan.github.io/todo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/cluster_bugs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/cluster_bugs/</guid>
      <description>集群测试问题集合 集群环境删节点只剩下一个集群节点时，请求流表时报错，提示没有leader { &amp;quot;errors&amp;quot;: { &amp;quot;error&amp;quot;: [ { &amp;quot;error-type&amp;quot;: &amp;quot;application&amp;quot;, &amp;quot;error-tag&amp;quot;: &amp;quot;operation-failed&amp;quot;, &amp;quot;error-message&amp;quot;: &amp;quot;Error executeRead ReadData for path /(urn:opendaylight:inventory?revision=2013-08-19)nodes/node/node[{(urn:opendaylight:inventory?revision=2013-08-19)id=openflow:1}]/AugmentationIdentifier{childNames=[(urn:opendaylight:flow:inventory?revision=2013-08-19)supported-match-types, (urn:opendaylight:flow:inventory?revision=2013-08-19)supported-instructions, (urn:opendaylight:flow:inventory?revision=2013-08-19)supported-actions, (urn:opendaylight:flow:inventory?revision=2013-08-19)switch-features, (urn:opendaylight:flow:inventory?revision=2013-08-19)manufacturer, (urn:opendaylight:flow:inventory?revision=2013-08-19)hardware, (urn:opendaylight:flow:inventory?revision=2013-08-19)software, (urn:opendaylight:flow:inventory?revision=2013-08-19)serial-number, (urn:opendaylight:flow:inventory?revision=2013-08-19)description, (urn:opendaylight:flow:inventory?revision=2013-08-19)port-number, (urn:opendaylight:flow:inventory?revision=2013-08-19)meter, (urn:opendaylight:flow:inventory?revision=2013-08-19)stale-meter, (urn:opendaylight:flow:inventory?revision=2013-08-19)ip-address, (urn:opendaylight:flow:inventory?revision=2013-08-19)group, (urn:opendaylight:flow:inventory?revision=2013-08-19)stale-group, (urn:opendaylight:flow:inventory?revision=2013-08-19)table, (urn:opendaylight:flow:inventory?revision=2013-08-19)table-features]}/(urn:opendaylight:flow:inventory?revision=2013-08-19)table/table[{(urn:opendaylight:flow:inventory?revision=2013-08-19)id=0}]&amp;quot;, &amp;quot;error-info&amp;quot;: &amp;quot;org.opendaylight.mdsal.common.api.DataStoreUnavailableException: Shard member-2-shard-inventory-operational currently has no leader. Try again later.\n\tat org.opendaylight.controller.cluster.datastore.NoOpTransactionContext.executeRead(NoOpTransactionContext.java:66)\n\tat org.opendaylight.controller.cluster.datastore.TransactionProxy$1.invoke(TransactionProxy.java:95)\n\tat org.opendaylight.controller.cluster.datastore.TransactionContextWrapper.executePriorTransactionOperations(TransactionContextWrapper.java:194)\n\tat org.opendaylight.controller.cluster.datastore.AbstractTransactionContextFactory.onFindPrimaryShardFailure(AbstractTransactionContextFactory.java:109)\n\tat org.opendaylight.controller.cluster.datastore.AbstractTransactionContextFactory.access$100(AbstractTransactionContextFactory.java:37)\n\tat org.opendaylight.controller.cluster.datastore.AbstractTransactionContextFactory$1.onComplete(AbstractTransactionContextFactory.java:136)\n\tat org.opendaylight.controller.cluster.datastore.AbstractTransactionContextFactory$1.onComplete(AbstractTransactionContextFactory.java:130)\n\tat akka.dispatch.OnComplete.internal(Future.scala:260)\n\tat akka.dispatch.OnComplete.internal(Future.scala:258)\n\tat akka.dispatch.japi$CallbackBridge.apply(Future.scala:188)\n\tat akka.dispatch.japi$CallbackBridge.apply(Future.scala:185)\n\tat scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)\n\tat akka.dispatch.BatchingExecutor$AbstractBatch.processBatch(BatchingExecutor.scala:55)\n\tat akka.dispatch.BatchingExecutor$BlockableBatch.$anonfun$run$1(BatchingExecutor.scala:91)\n\tat scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)\n\tat scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:85)\n\tat akka.dispatch.BatchingExecutor$BlockableBatch.run(BatchingExecutor.scala:91)\n\tat akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40)\n\tat akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(ForkJoinExecutorConfigurator.scala:43)\n\tat akka.dispatch.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat akka.dispatch.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\n\tat akka.dispatch.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n\tat akka.dispatch.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\nCaused by: org.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/elasticsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/elasticsearch/</guid>
      <description>概念 索引 保存数据的地方，指向一个或多个物理分片的逻辑命名空间  分片 · Elasticsearch底层工作单元，仅保存全部数据中的一部分 · Elasticsearch利用分片将数据分发到集群各处，分片是数据的容器，文档保存在分片内，分片由被分配到集群内的各个节点上 · 当集群规模扩大或缩小时，Elasticsearch会自动在各节点中迁移分片，始终使数据均匀分布在集群内 · 分片有主分片和副分片之分，但索引内任意一个文档都会归属一个主分片 · 主分片的数量决定了索引能保存的最大数据量 · 副分片只是主分片的拷贝，用于数据冗余保护备份，但也提供搜索和返回文档的服务 · 分片是一个Lucene的实例，是一个完整的搜索引擎 · 文档被存储和索引到分片内，但应用程序是直接与索引交互而不是与分片交互 总结： 1. 索引内数据是所有主分片内数据的合集 2. 副分片是对所有主分片的数据拷贝和备份 3. 所有分片始终作为数据的保存容器被均匀分布到Elasticsearch集群的各个节点 4. 每个分片都能提供文档搜索和返回文档服务，但应用程序是直接与索引交互检索而不是与分片交互  集群状态 status 字段指示着当前集群在总体上是否工作正常。它的三种颜色含义如下：
green 所有的主分片和副本分片都正常运行。 yellow 所有的主分片都正常运行，但不是所有的副本分片都正常运行。 red 有主分片没能正常运行。  文档 大多数应用中，多数实体或对象序列化为包含键值对的JSON对象。在Elasticsearch中，文档指最顶层或根对象，这个根对象呗序列化成JSON存储在Elasticsearch中，并指定了唯一ID
元数据 关于文档自身的信息 · _index 文档索引，通俗点讲就是文档在哪存放 · _type 文档表示的对象类别 · _id 文档唯一标识
# 操作
健康状态获取 curl -X GET &amp;quot;localhost:9200/_cluster/health&amp;quot;  ## 索引建立与分片副本 单节点上创建一个名为blogs的索引，分配个3个主分片和一份副本(每个朱分片拥有一个副本分片)
curl -X PUT &amp;quot;localhost:9200/blogs&amp;quot; -H &#39;Content-Type: application/json&#39; -d&#39; { &amp;quot;settings&amp;quot; : { &amp;quot;number_of_shards&amp;quot; : 3, &amp;quot;number_of_replicas&amp;quot; : 1 } } &#39;  查看集群健康状态</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/faq/</guid>
      <description> FAQ Rancher Agent  使用一个克隆的Kubernetes虚拟机 如果你使用了克隆其他Agent主机的虚拟机并尝试注册它，它将不能工作。在rancher-agent容器的日志中会产生ERROR: Please re-register this agent.字样的日志。Rancher主机的唯一ID保存在/var/lib/rancher/state，因为新添加和虚拟机和被克隆的主机有相同的唯一ID，所以导致无法注册成功。 解决方法是在克隆的VM上运行以下命令： rm -rf /var/lib/rancher/state; docker rm -fv rancher-agent; docker rm -fv rancher-agent-state 完成后可重新注册。  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/ha/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/ha/</guid>
      <description>HA Ubuntu版本 18.04
Ubuntu更新源 修改文件 /etc/apt/sources.list
deb http://10.190.48.88/ubuntu/ bionic main universe multiverse deb http://10.190.48.88/ubuntu/ bionic-updates main universe multiverse deb http://10.190.48.88/ubuntu/ bionic-security main universe multiverse  kubectl 安装 # 下载目前最新版 wget https://www.cnrancher.com/download/kubernetes/linux-amd64-v1.14.1-kubectl # 设置执行权限 chmod +x ./linux-amd64-v1.14.1-kubectl # 将其移动到 /usr/locak/bin/kubectl sudo mv ./linux-amd64-v1.14.1-kubectl /usr/local/bin/kubectl  RKE安装 # 下载目前最新版 wget https://www.cnrancher.com/download/rke/v0.1.18-rke_linux-amd64 # 设置执行权限 chmod +x v0.1.18-rke_linux-amd64 # 将其移动到 /usr/locak/bin/kubectl sudo cp v0.1.18-rke_linux-amd64 /usr/local/bin/rke # 验证安装 rke --version # rke version v0.1.18  Helm安装 # 网络原因，切换到 Rancher 提供的镜像连接 wget https://www.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/license/</guid>
      <description>License制作及简介 license制作依赖openssl服务
License制作步骤  1.登陆license服务器
ssh mano@10.190.49.60 password: 12  2.切换到license制作目录
cd /home/licenseFactory/   注: 该目录下的公钥文件rsa_public_key.pem 不要动
 3.创建license输入文件  根据实际需求，将license管理对象填写到输入文件plain.txt
以制作vnfm license为例:
echo &#39;{&amp;quot;productId&amp;quot;: &amp;quot;fh_2019_nfvo&amp;quot;,&amp;quot;vimThreshold&amp;quot;:&amp;quot;20&amp;quot;,&amp;quot;vnfmThreshold&amp;quot;:&amp;quot;20&amp;quot;,&amp;quot;licenseType&amp;quot;:&amp;quot;NFVO&amp;quot;}&#39; &amp;gt; plain.txt   4.生成license文件
openssl rsautl -encrypt -in plain.txt -inkey rsa_public_key.pem -pubin -out license.lsn   参数说明:
 plain.txt 为欲加密文件 inkey 指定公钥文件 pubin -out 指定加密后文件  License输入文件 下列license的输入文件通过替换上一章License制作步骤的第3步中plain.txt文件中的内容，从而达到生成控制不同对象的license输出
控制网元数目及类型的控制 参数说明： | 参数| 说明| |:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;| |productId | productId为预导入license系统的vnfmId或nfvoId，如系统id与license中productId不一致将导入失败.licenseType为NFVO时，填nfvoId, licenseType为VNFM时，填vnfmId| |vnfThreshold | vnf阈值，控制实例化的vnf最大数 | |licenseType | license类型, NFVO类型填NFVO, VNFM类型填VNFM.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/markdown%E8%AF%AD%E6%B3%95%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/markdown%E8%AF%AD%E6%B3%95%E7%9F%A5%E8%AF%86/</guid>
      <description>  笔记折叠 ```  Title content!!!  ```   表格 | 默认 | 左对齐| 右对齐| 居中| |-------|:-------|---------:|:---------:| |aaa|aaa|aaa|aaa| |aaabbbb|aaabbb|aaabbb|aaabbbb| </description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/opendaylight/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/opendaylight/</guid>
      <description>Opendaylight 集群基础 架构 数据同步 分布式数据存储同步使用Raft，远程过程调用仓库同步使用Gossip
分部署数据存储(Distributed Data Store)  HA   Replication  a) 按序复制(Journal replication) b) 快照型复制(Snapshot replication)  Durability/Recovery   数据存储流程  Startup
向DistributedConfigDataProviderModule发起createInstance请求，创建实例并执行监听回调(waitTillReadyLatch)。由ShardManager向Shard中进行数据存储，当数据存储Ready后，waitTillReadyLatch收到ready完成create流程
Recovery
从硬盘读取最新状态反馈给ShardManager，全部完毕后，通知waitTillReadyLatch countDown
Recovery的条件：
a) Recovery必须是完整的
b) 所有的Shard Leaders必须已知
c) 三类消息被ShardManager监听
   消息名 说明     Cluster.MemberStatusUp 用于说明集群member的地址   LeaderStateChanged 用于说明follower拥有不同的leader   ShardRoleChanged 用于说明一个Shard的角色发生变化        d) 默认90s超时，但可配置
e) block config sub-system?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/ovs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/ovs/</guid>
      <description> OVS笔记 安装 # 更新 apt-get update # 移除bridge rmmod bridge * 关闭bridge模块。可先通过lsmod | grep bridge 查看，然后用rmmod bridge关闭，若出现bridge正在被另一模块使用导致无法关闭的错误，则需要先关闭正在使用bridge的模块。 # 安装OVS apt-get install openvswitch-switch # 查看安装结果 ovs-vsctl show  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/python/</guid>
      <description>Python学习笔记 pip安装包所在路径查看 有时候pip安装后，不知道python包被安装到何处，可以调用如下命令查看python系统路径帮助排查
pip -m site  Python标识符命名规则 标识符：用于变量、函数、类、模块等的名称。 一般有如下规则：
1. 区分大小写 2. 第一个字符必须是字母、下划线，其余字符是字母、数字、下划线 3. 不能使用关键字，关键字查询IDLE-&amp;gt;help()-&amp;gt;keywords 4. 以双下划线开头和结尾的名称通常含有特殊含义，尽量避免，如__init__  如下是约定俗称的命名规则：
   类型 规则 例子     模块和包名 全小写字母，尽量简单，若多个单词之间用下划线 math,os,sys   函数名 全小写，多个单词之间用下划线隔开 phone, my_name   类名 首字母大写，采用驼峰原则，多个单词之间每个单词第一个字母大写，其余部分小写 MyPhone, MyClass, Phone   常量名 全大写字母，多个单词使用下划线隔开 SPEED, MAX_SPEED    Python运算符    运算符 说明 例子 结果     + 加法 3+2 5   - 减法 3-2 1   * 乘法 3*2 6   / 除法 3&amp;frasl;2 1.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83/</guid>
      <description>服务器信息  git服务器信息
10.190.49.96 su: mano2017 mano：mano2017 git: jiangxing dev:12 gerrit平台: gerrit 123321 gitlab平台: gerrit 12344321  
 vCenter登陆
IP: 10.190.49.50 用户： administrator@vsphere.local 密码： `1Qazxcv  
 VNF csar包制作服务器
wcl/wcl 10.190.3.198 user/user 10.190.3.71  
 小站
IP： 10.190.49.55：5555 用户： ghost@ghost.com 密码： manomano2017  
 docker仓库
IP： 10.190.49.56:8081    招聘
智联 wlccx002 developIPRAN002 猎聘 wlccx2 developIPRAN    部门代码审查报告地址
http://10.90.6.59:81/svn/FOSV3R1/fosv3_testcase/Code/code-review 没有用户名的,可以把svn账号发给曹松波. 他帮忙建立账号 账号：wt 密码123</description>
    </item>
    
  </channel>
</rss>