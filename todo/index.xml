<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Todos on JiangX</title>
    <link>https://vincent-wuhan.github.io/todo/</link>
    <description>Recent content in Todos on JiangX</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://vincent-wuhan.github.io/todo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/centos/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/centos/</guid>
      <description>私有源搭建  本文档中所有操作默认采用ROOT权限操作 本文档中使用的变量列表如下
    变量 举例 说明     REPO_ROOT /home/centos/ 私有源服务器安装目录   YUM_REPO /home/centos/yumRepo yum私有仓库目录   PIP_REPO /home/centos/pipRepo pip私有仓库目录   SERVER_IP 172.30.0.24 私有源服务器地址   CLIENT_IP 172.30.0.10 客户测试机地址   YUM_PORT 10084 yum私有源服务器监听端口   PIP_PORT 10085 pip私有源服务器监听端口   RPM_SOFT_NAME docker-ce RPM软件包名   PIP_SOFT_NAME docker-compose PIP软件包名   PIP_SOFT_VERSION 1.24.0 PIP软件包版本   YUM_REPO_URL http://172.30.0.24:10084 私有YUM源地址   PIP_REPO_URL http://172.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/ci%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/ci%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/cluster_bugs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/cluster_bugs/</guid>
      <description>集群测试问题集合 集群环境删节点只剩下一个集群节点时，请求流表时报错，提示没有leader { &amp;#34;errors&amp;#34;: { &amp;#34;error&amp;#34;: [ { &amp;#34;error-type&amp;#34;: &amp;#34;application&amp;#34;, &amp;#34;error-tag&amp;#34;: &amp;#34;operation-failed&amp;#34;, &amp;#34;error-message&amp;#34;: &amp;#34;Error executeRead ReadData for path /(urn:opendaylight:inventory?revision=2013-08-19)nodes/node/node[{(urn:opendaylight:inventory?revision=2013-08-19)id=openflow:1}]/AugmentationIdentifier{childNames=[(urn:opendaylight:flow:inventory?revision=2013-08-19)supported-match-types, (urn:opendaylight:flow:inventory?revision=2013-08-19)supported-instructions, (urn:opendaylight:flow:inventory?revision=2013-08-19)supported-actions, (urn:opendaylight:flow:inventory?revision=2013-08-19)switch-features, (urn:opendaylight:flow:inventory?revision=2013-08-19)manufacturer, (urn:opendaylight:flow:inventory?revision=2013-08-19)hardware, (urn:opendaylight:flow:inventory?revision=2013-08-19)software, (urn:opendaylight:flow:inventory?revision=2013-08-19)serial-number, (urn:opendaylight:flow:inventory?revision=2013-08-19)description, (urn:opendaylight:flow:inventory?revision=2013-08-19)port-number, (urn:opendaylight:flow:inventory?revision=2013-08-19)meter, (urn:opendaylight:flow:inventory?revision=2013-08-19)stale-meter, (urn:opendaylight:flow:inventory?revision=2013-08-19)ip-address, (urn:opendaylight:flow:inventory?revision=2013-08-19)group, (urn:opendaylight:flow:inventory?revision=2013-08-19)stale-group, (urn:opendaylight:flow:inventory?revision=2013-08-19)table, (urn:opendaylight:flow:inventory?revision=2013-08-19)table-features]}/(urn:opendaylight:flow:inventory?revision=2013-08-19)table/table[{(urn:opendaylight:flow:inventory?revision=2013-08-19)id=0}]&amp;#34;, &amp;#34;error-info&amp;#34;: &amp;#34;org.opendaylight.mdsal.common.api.DataStoreUnavailableException: Shard member-2-shard-inventory-operational currently has no leader. Try again later.\n\tat org.opendaylight.controller.cluster.datastore.NoOpTransactionContext.executeRead(NoOpTransactionContext.java:66)\n\tat org.opendaylight.controller.cluster.datastore.TransactionProxy$1.invoke(TransactionProxy.java:95)\n\tat org.opendaylight.controller.cluster.datastore.TransactionContextWrapper.executePriorTransactionOperations(TransactionContextWrapper.java:194)\n\tat org.opendaylight.controller.cluster.datastore.AbstractTransactionContextFactory.onFindPrimaryShardFailure(AbstractTransactionContextFactory.java:109)\n\tat org.opendaylight.controller.cluster.datastore.AbstractTransactionContextFactory.access$100(AbstractTransactionContextFactory.java:37)\n\tat org.opendaylight.controller.cluster.datastore.AbstractTransactionContextFactory$1.onComplete(AbstractTransactionContextFactory.java:136)\n\tat org.opendaylight.controller.cluster.datastore.AbstractTransactionContextFactory$1.onComplete(AbstractTransactionContextFactory.java:130)\n\tat akka.dispatch.OnComplete.internal(Future.scala:260)\n\tat akka.dispatch.OnComplete.internal(Future.scala:258)\n\tat akka.dispatch.japi$CallbackBridge.apply(Future.scala:188)\n\tat akka.dispatch.japi$CallbackBridge.apply(Future.scala:185)\n\tat scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)\n\tat akka.dispatch.BatchingExecutor$AbstractBatch.processBatch(BatchingExecutor.scala:55)\n\tat akka.dispatch.BatchingExecutor$BlockableBatch.$anonfun$run$1(BatchingExecutor.scala:91)\n\tat scala.runtime.java8.JFunction0$mcV$sp.apply(JFunction0$mcV$sp.java:23)\n\tat scala.concurrent.BlockContext$.withBlockContext(BlockContext.scala:85)\n\tat akka.dispatch.BatchingExecutor$BlockableBatch.run(BatchingExecutor.scala:91)\n\tat akka.dispatch.TaskInvocation.run(AbstractDispatcher.scala:40)\n\tat akka.dispatch.ForkJoinExecutorConfigurator$AkkaForkJoinTask.exec(ForkJoinExecutorConfigurator.scala:43)\n\tat akka.dispatch.forkjoin.ForkJoinTask.doExec(ForkJoinTask.java:260)\n\tat akka.dispatch.forkjoin.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:1339)\n\tat akka.dispatch.forkjoin.ForkJoinPool.runWorker(ForkJoinPool.java:1979)\n\tat akka.dispatch.forkjoin.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:107)\nCaused by: org.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/cluster_test/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/cluster_test/</guid>
      <description>ODL集群测试报告 测试1 - 全连接模式 拓扑 C1(10.190.49.72:6653) C2(10.190.49.72:6654) C3(10.190.49.72:6655) | (3C:1S) | (3C:1S) S1 Openflow:1 - S2 Openflow:2 / \ / \ H1(10.0.0.1) H2(10.0.0.2) H3(10.0.0.3) H4(10.0.0.4) 说明 &amp;gt; C1、C2、C3为同一宿主机上部署的控制器集群，分别使用6653、6654、6655进行流表配置 &amp;gt; S1和S2为两台OVS虚拟交换机，与集群内所有控制器直接建立全链接 &amp;gt; S1、S2下分别下挂有2台宿主机
在mininet环境，mininet/custom目录下，运行以上topo部署脚本,完成本地ovs与控制器集群的对接
 点击查看mininet部署脚本  
#!/user/bin/env python # -*- coding:utf-8 -*- # Author: jiangx from mininet.net import Mininet from mininet.node import Controller, OVSKernelSwitch, RemoteController from mininet.cli import CLI from mininet.log import setLogLevel, info # TOPO # C1(10.190.49.72:6653) C2(10.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/common/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/common/</guid>
      <description>MANO常用网址    URL 说明     http://MSBIP:30280/iui/usecaseui/resource-management/#/ns uui管理接口        删除所有helm list helm delete --purge $(helm list|grep &amp;#34;dev&amp;#34;|awk &amp;#39;{print $1}&amp;#39;) 下载部署软件 下载安装部署包 curl -O http://10.190.49.48/installRel/2.1.9-new/install-2019-05-06T104533.tar.gz 下载oom curl -O http://10.190.49.48/installRel/2.1.9-new/oom.tar.gz 常见问题定位手册 带SFC的NS实例化失败问题定位 kubernetes环境，查看nslcm容器日志  检查vnf创建是否成功。vnf创建成功是创建sfc的前提
 检查sfcdriver是否注册，sfcdriver的注册路径为： uui-ui-&amp;gt;运维管理-&amp;gt;外部系统注册-&amp;gt;SFC Driver
URL地址为 MSB_IP:30280/iui/usecaseui/resource-management/#/esr-sfc-driver 检查sfcdriver注册url是否为api/fhsfcdriver/v1
 检查sfcdriver注册的VIM ID是否正确
  如果上述检查无误，nslcm日志显示sfc中任何一类错误，例如create port chain error等，到第2步
kubernetes环境，查看sfcdriver容器日志 常见sfc创建失败原因，日志里一般提示很明显，常见错误搜集如下： 1. 流分类规则冲突，错误日志如下：
resp_body={&amp;#34;error&amp;#34;:&amp;#34;{\&amp;#34;NeutronError\&amp;#34;: {\&amp;#34;message\&amp;#34;: \&amp;#34;Flow Classifier a2dc725e-93c7-4a0f-ae5f-0041f3d8b73c conflicts with Flow Classifier 391c6be6-a562-4273-8134-e01ca4a98719 in port chain 61a06874-61c6-4dd2-aa9b-39acf7f2d65c.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/docker/</guid>
      <description>Docker 常用命令  镜像导出   docker save 镜像:TAG &amp;gt; tar包名称
  镜像导入   docker load &amp;lt; tar包名称
  删除镜像    删除所有容器 docker rm docker ps -a -q 删除所有镜像 docker rmi docker images -q 删除没有打标签的镜像 docker rmi docker images -q | awk &#39;/^&amp;lt;none&amp;gt;/ { print $3 }&#39; 删除包含关键词的镜像 docker rmi &amp;ndash;force docker images | grep 关键词 | awk &#39;{print $3}&#39; 5.删除镜像名为none的镜像 docker ps -a | grep &amp;ldquo;Exited&amp;rdquo; | awk &amp;lsquo;{print $1 }&amp;rsquo;|xargs docker stop docker ps -a | grep &amp;ldquo;Exited&amp;rdquo; | awk &amp;lsquo;{print $1 }&amp;rsquo;|xargs docker rm docker images|grep none|awk &amp;lsquo;{print $3 }&amp;rsquo;|xargs docker rmi   Dockerfile ADD路径说明  1、如果源路径是个文件，且目标路径是以 / 结尾， 则docker会把目标路径当作一个目录，会把源文件拷贝到该目录下。 如果目标路径不存在，则会自动创建目标路径。 2、如果源路径是个文件，且目标路径是不是以 / 结尾，则docker会把目标路径当作一个文件。 如果目标路径不存在，会以目标路径为名创建一个文件，内容同源文件； 如果目标文件是个存在的文件，会用源文件覆盖它，当然只是内容覆盖，文件名还是目标文件名。 如果目标文件实际是个存在的目录，则会源文件拷贝到该目录下。 注意，这种情况下，最好显示的以 / 结尾，以避免混淆。 3、如果源路径是个目录，且目标路径不存在，则docker会自动以目标路径创建一个目录，把源路径目录下的文件拷贝进来。 如果目标路径是个已经存在的目录，则docker会把源路径目录下的文件拷贝到该目录下。 4、如果源文件是个归档文件（压缩文件），则docker会自动帮解压。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/elasticsearch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/elasticsearch/</guid>
      <description>概念 索引 保存数据的地方，指向一个或多个物理分片的逻辑命名空间 分片 · Elasticsearch底层工作单元，仅保存全部数据中的一部分 · Elasticsearch利用分片将数据分发到集群各处，分片是数据的容器，文档保存在分片内，分片由被分配到集群内的各个节点上 · 当集群规模扩大或缩小时，Elasticsearch会自动在各节点中迁移分片，始终使数据均匀分布在集群内 · 分片有主分片和副分片之分，但索引内任意一个文档都会归属一个主分片 · 主分片的数量决定了索引能保存的最大数据量 · 副分片只是主分片的拷贝，用于数据冗余保护备份，但也提供搜索和返回文档的服务 · 分片是一个Lucene的实例，是一个完整的搜索引擎 · 文档被存储和索引到分片内，但应用程序是直接与索引交互而不是与分片交互 总结： 1. 索引内数据是所有主分片内数据的合集 2. 副分片是对所有主分片的数据拷贝和备份 3. 所有分片始终作为数据的保存容器被均匀分布到Elasticsearch集群的各个节点 4. 每个分片都能提供文档搜索和返回文档服务，但应用程序是直接与索引交互检索而不是与分片交互  集群状态 status 字段指示着当前集群在总体上是否工作正常。它的三种颜色含义如下：
green 所有的主分片和副本分片都正常运行。 yellow 所有的主分片都正常运行，但不是所有的副本分片都正常运行。 red 有主分片没能正常运行。 文档 大多数应用中，多数实体或对象序列化为包含键值对的JSON对象。在Elasticsearch中，文档指最顶层或根对象，这个根对象呗序列化成JSON存储在Elasticsearch中，并指定了唯一ID
元数据 关于文档自身的信息 · _index 文档索引，通俗点讲就是文档在哪存放 · _type 文档表示的对象类别 · _id 文档唯一标识
# 操作
健康状态获取 curl -X GET &amp;#34;localhost:9200/_cluster/health&amp;#34; ## 索引建立与分片副本 单节点上创建一个名为blogs的索引，分配个3个主分片和一份副本(每个朱分片拥有一个副本分片)
curl -X PUT &amp;#34;localhost:9200/blogs&amp;#34; -H &amp;#39;Content-Type: application/json&amp;#39; -d&amp;#39; { &amp;#34;settings&amp;#34; : { &amp;#34;number_of_shards&amp;#34; : 3, &amp;#34;number_of_replicas&amp;#34; : 1 } } &amp;#39; 查看集群健康状态</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/faq/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/faq/</guid>
      <description> FAQ Rancher Agent  使用一个克隆的Kubernetes虚拟机 如果你使用了克隆其他Agent主机的虚拟机并尝试注册它，它将不能工作。在rancher-agent容器的日志中会产生ERROR: Please re-register this agent.字样的日志。Rancher主机的唯一ID保存在/var/lib/rancher/state，因为新添加和虚拟机和被克隆的主机有相同的唯一ID，所以导致无法注册成功。 解决方法是在克隆的VM上运行以下命令： rm -rf /var/lib/rancher/state; docker rm -fv rancher-agent; docker rm -fv rancher-agent-state 完成后可重新注册。  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/git/</guid>
      <description>git 常用命令    命令 说明     git config &amp;ndash;global core.editor vim 设置全局编辑器为vim   git config &amp;ndash;global user.name &amp;ldquo;jiangx&amp;rdquo; 设置用户名   git config &amp;ndash;global user.email &amp;ldquo;jiangx@fiberhome.com&amp;rdquo; 设置用户邮箱   git remote add gerrit http://user:password@10.190.49.99:8080/a/project.git 设置远程gerrit        日志修改  修改最近一次   git commit &amp;ndash;amend
  修改历史中的某个记录    当前版本之前的倒数第三次的日志 git rebase -i head~3 输出结果中选择需要修改的那一条，将pick改为edit   pick f9173fc Fix wrong name &amp;#39;path_filename&amp;#39; pick 3fddde0 Change versiton to 0.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/gitlab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/gitlab/</guid>
      <description>GitLab学习笔记 docker安装  ubuntu系统软件源  手动编辑 /etc/apt/sources.list 文件
14.04
deb http://10.190.48.88/ubuntu/ trusty main universe multiverse deb http://10.190.48.88/ubuntu/ trusty-updates main universe multiverse deb http://10.190.48.88/ubuntu/ trusty-security main universe multiverse 16.04
deb http://10.190.48.88/ubuntu/ xenial main universe multiverse deb http://10.190.48.88/ubuntu/ xenial-updates main universe multiverse deb http://10.190.48.88/ubuntu/ xenial-security main universe multiverse 18.04
deb http://10.190.48.88/ubuntu/ bionic main universe multiverse deb http://10.190.48.88/ubuntu/ bionic-updates main universe multiverse deb http://10.190.48.88/ubuntu/ bionic-security main universe multiverse  安装
apt-get install docker.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/ha/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/ha/</guid>
      <description>HA Ubuntu版本 18.04
Ubuntu更新源 修改文件 /etc/apt/sources.list
deb http://10.190.48.88/ubuntu/ bionic main universe multiverse deb http://10.190.48.88/ubuntu/ bionic-updates main universe multiverse deb http://10.190.48.88/ubuntu/ bionic-security main universe multiverse kubectl 安装 # 下载目前最新版 wget https://www.cnrancher.com/download/kubernetes/linux-amd64-v1.14.1-kubectl # 设置执行权限 chmod +x ./linux-amd64-v1.14.1-kubectl # 将其移动到 /usr/locak/bin/kubectl sudo mv ./linux-amd64-v1.14.1-kubectl /usr/local/bin/kubectl RKE安装 # 下载目前最新版 wget https://www.cnrancher.com/download/rke/v0.1.18-rke_linux-amd64 # 设置执行权限 chmod +x v0.1.18-rke_linux-amd64 # 将其移动到 /usr/locak/bin/kubectl sudo cp v0.1.18-rke_linux-amd64 /usr/local/bin/rke # 验证安装 rke --version # rke version v0.1.18 Helm安装 # 网络原因，切换到 Rancher 提供的镜像连接 wget https://www.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/helm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/helm/</guid>
      <description>Helm 基础知识 重要对象    关键词 说明     chart 创建一个应用的信息集合，包括各种Kubernetes对象的配置模板、参数定义、依赖关系、文档说明等。Chart是应用部署的自包含逻辑单元，可以将chart想象成apt、yum中的软件安装包   release chart的运行实例，代表了一个正在运行的应用。当chart被安装到Kubernetes集群，就生成一个release。chart能够多次安装到同一个集群，每次安装都是一个release    功能 · 从零创建新chart
· 与存储chart的仓库交互，拉取、保存和更新chart
· 在Kubernetes集群中安装和卸载release
· 更新、回滚和测试release
组件  Helm客户端  Helm命令行工具，支持用户进行如下操作
· 在本地开发chart · 管理chart仓库 · 与Tiller服务器交互 · 在远程Kubernetes集群上安装chart · 查看release信息 · 升级或卸载已有release  Tiller服务器  Tiller服务器运行在Kubernetes集群中。
常见命令    命令名称 说明     helm repo index REPO_PATH 本地仓库index创建    Q&amp;amp;A helm安装提示index.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/hugo-how-to/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/hugo-how-to/</guid>
      <description> hugo 博客操作  创建blog hugo new site blog  blog为博客存放目录
 创建博客文章  hugo new path/content.md
 本地预览  hugo server &amp;ndash;buildDrafts
 编译web格式预发布  hugo base-url=&amp;ldquo;http://vincnet-wuhan.github.io&amp;quot; &amp;ndash;buildDrafts 编译生成的文件在blog下的public目录下
 发布到github  切换到public目录，初始化本地仓库
cd public git init git add . git commit -m &amp;#39;message&amp;#39; git remote add origin https://github.com/vincent-wuhan/vincent-wuhan.github.io.git git push -u origin master</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/java/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/java/</guid>
      <description> JAVA 安装 在ubuntu中，java有两种版本，一种是开源版本OpenJDK，另外一种是Oracle版本，两者区别不大，知识Oracle的多了一些商业功能
安装
# 安装OpenJDK 10 JDK apt install default-jdk # 安装OpenJDK 8 JDK apt install openjdk-8-jdk # 安装Oracle JAVA # 1.添加新的存储库WebUpd8，可以自动下载并安装Oracle JDK apt install software-properities-common dirmngr add-apt-repository ppa:webupd8team/java apt update # 2.安装java8 apt-get install oracle-java8-installer 设置JAVA_HOME等参数, 打开~/.bashrc,末尾追加
export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-amd64 export JRE_HOME=${JAVA_HOME}/jre export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib export PATH=${JAVA_HOME}/bin:$PATH </description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/kubernetes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/kubernetes/</guid>
      <description>Kubernetes kubectl常用命令 #异常pod捕获命令 kubectl get pods -n kube-system | grep -v Running # 查看目前所有的pod kubectl get po # 查看目前所有的replica set kubectl get rs # 查看目前所有的deployment kubectl get deployment # 查看my-nginx pod的详细状态 kubectl describe po my-nginx # 查看my-nginx replica set的详细状态 kubectl describe rs my-nginx # 查看my-nginx deployment的详细状态 kubectl describe deployment my-nginx # 查看相关事件 kubectl get eventskubectl get events kubectl delete deployment my-nginx “&amp;mdash;”的作用 一个YAML中定义多个资源，用&amp;rdquo;&amp;mdash;&amp;ldquo;分割
Service类型    类型 说明     ClusterIP Service通过Cluster内部的IP对外提供服务，服务只有Cluster内的节点和Pod可以访问   NodePort Service通过Cluster节点的静态端口对外提供服务。Cluster外部可以通过:访问服务   LoadBalancer Service利用Cloud Provider特有的load balancer对外提供服务，Cloud Provider负责将load balancer的流量导向Service        回滚设置 默认配置下，Kubernetes只会保留最近几个revision，可以在Deployment配置文件中通过revisionHistoryLimit属性添加revision数量。</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/license/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/license/</guid>
      <description>License制作及简介 license制作依赖openssl服务
License制作步骤  1.登陆license服务器
ssh mano@10.190.49.60 password: 12 2.切换到license制作目录
cd /home/licenseFactory/  注: 该目录下的公钥文件rsa_public_key.pem 不要动
 3.创建license输入文件  根据实际需求，将license管理对象填写到输入文件plain.txt
以制作vnfm license为例:
echo &amp;#39;{&amp;#34;productId&amp;#34;: &amp;#34;fh_2019_nfvo&amp;#34;,&amp;#34;vimThreshold&amp;#34;:&amp;#34;20&amp;#34;,&amp;#34;vnfmThreshold&amp;#34;:&amp;#34;20&amp;#34;,&amp;#34;licenseType&amp;#34;:&amp;#34;NFVO&amp;#34;}&amp;#39; &amp;gt; plain.txt  4.生成license文件
openssl rsautl -encrypt -in plain.txt -inkey rsa_public_key.pem -pubin -out license.lsn  参数说明:
 plain.txt 为欲加密文件 inkey 指定公钥文件 pubin -out 指定加密后文件  License输入文件 下列license的输入文件通过替换上一章License制作步骤的第3步中plain.txt文件中的内容，从而达到生成控制不同对象的license输出
控制网元数目及类型的控制 参数说明： | 参数| 说明| |:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;|:&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;| |productId | productId为预导入license系统的vnfmId或nfvoId，如系统id与license中productId不一致将导入失败.licenseType为NFVO时，填nfvoId, licenseType为VNFM时，填vnfmId| |vnfThreshold | vnf阈值，控制实例化的vnf最大数 | |licenseType | license类型, NFVO类型填NFVO, VNFM类型填VNFM.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/linux/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/linux/</guid>
      <description>Linux技巧 Ubuntu common 查看磁盘大文件 du -sh /* 修改网卡名字（如eth0） /etc/udev/rules.d/70-persistent-net.rules Root远程登录设置 #!/bin/bash # setup root access - default login: oom/oom - comment out to restrict access too ssh key only sed -i &amp;#39;s/PermitRootLogin.*/PermitRootLogin yes/&amp;#39; /etc/ssh/sshd_config sed -i &amp;#39;s/PasswordAuthentication.*/PasswordAuthentication yes/&amp;#39; /etc/ssh/sshd_config service sshd restart echo -e &amp;#34;mano2018\nmano2018&amp;#34; | passwd root Root用户密码设置 sudo passwd root 查看apt-get依赖包 cd /var/cache/apt/archives
添加用户到docker组 root@mano:~# gpasswd -a sdc docker Adding user sdc to group docker root@mano:~# newgrp docker</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/logging-user-guide/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/logging-user-guide/</guid>
      <description>Kubernetes日志管理 日志采集方式    采集方式 说明     原生方式 使用 kubectl logs 直接在查看本地保留的日志，或者通过docker engine的 log driver 把日志重定向到文件、syslog、fluentd等系统中。   DaemonSet方式 在K8S的每个node上部署日志agent，由agent采集所有容器的日志到服务端。   Sidecar方式 一个POD中运行一个sidecar的日志agent容器，用于采集该POD主容器产生的日志。    Filebeat sidecar安装方式 resources文件 · filebeat.yml——filebeat配置文件 · logback.xml——日志格式定义
oom改造  添加filebeat.yml配置文件  路径: oom/kubernetes//resources/config/log/filebeat/filebeat.yml
一个简单的filebeat.yml配置
filebeat.prospectors: #it is mandatory, in our case it&amp;#39;s log - input_type: log #This is the canolical path as mentioned in logback.xml, *.* means it will monitor all files in the directory.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/markdown%E8%AF%AD%E6%B3%95%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/markdown%E8%AF%AD%E6%B3%95%E7%9F%A5%E8%AF%86/</guid>
      <description>  笔记折叠 ```  Title content!!!  ```   表格 | 默认 | 左对齐| 右对齐| 居中| |-------|:-------|---------:|:---------:| |aaa|aaa|aaa|aaa| |aaabbbb|aaabbb|aaabbb|aaabbbb| </description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/maven/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/maven/</guid>
      <description>maven 常用命令    命令 说明     mvn -version 查看maven的版本及配置信息   mvn archetype:create -DgroupId= DartifactId= 构建java项目   mvn archetype:create -DgroupId= DartifactId= -DarchetypeArtifactId=maven-archetype-webapp 创建web项目   mvn compile 编译项目代码   mvn package 打包项目   mvn package -Dmaven.test.skip=true 打包项目时跳过单元测试   mvn test 运行单元测试   mvn clean 清除编译产生的target文件夹内容，可以配合相应命令一起使用，如mvn clean package， mvn clean test   mvn install 打包后将其安装在本地仓库   mvn deploy 打包后将其安装到pom文件中配置的远程仓库   mvn eclipse:eclipse 将maven生成eclipse项目结构   mvn eclipse:clean 清除maven项目中eclipse的项目结构   mvn site 生成站点目录   mvn dependency:list 显示所有已经解析的所有依赖   mvn dependency:tree 以树的结构展示项目中的依赖   mvn dependency:analyze 对项目中的依赖进行分析，依赖未使用，使用单未引入   mvn tomcat:run 启动tomcat    POM文件 pom文件是maven中最重要的文件，以上命令的也需要根据pom文件进行运行。一般在构建完maven项目后需要修改pom文件添加诸如依赖关系，打包机制及一些项目的详细信息。一般的pom包含如下一些基本的信息： | 标签 | 说明| |:&amp;mdash;&amp;mdash;-|:&amp;mdash;| groupId|项目或者组织的唯一标志 artifactId|项目的名称 version|项目的版本 packaging|打包机制 name|用户描述项目的名称 url|应该是只是写明开发团队的网站</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/onap_offline_install/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/onap_offline_install/</guid>
      <description>一键部署脚本维护说明 环境准备 硬件环境    RAM HD vCores Ports     128G 160G 32 0.0.0.0/0          软件条件    Release Kubernetes Helm kubectl Docker     amsterdam 1.7.x 2.3.x 1.7.x 1.12.x   beijing/master 1.8.10 2.8.2 1.8.10 17.03.x           安装目录结构 install | |___ env | |___ file.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/opendaylight/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/opendaylight/</guid>
      <description>Opendaylight 集群基础 架构 数据同步 分布式数据存储同步使用Raft，远程过程调用仓库同步使用Gossip
分部署数据存储(Distributed Data Store)  HA   Replication  a) 按序复制(Journal replication) b) 快照型复制(Snapshot replication)  Durability/Recovery   数据存储流程  Startup
向DistributedConfigDataProviderModule发起createInstance请求，创建实例并执行监听回调(waitTillReadyLatch)。由ShardManager向Shard中进行数据存储，当数据存储Ready后，waitTillReadyLatch收到ready完成create流程
Recovery
从硬盘读取最新状态反馈给ShardManager，全部完毕后，通知waitTillReadyLatch countDown
Recovery的条件：
a) Recovery必须是完整的
b) 所有的Shard Leaders必须已知
c) 三类消息被ShardManager监听
   消息名 说明     Cluster.MemberStatusUp 用于说明集群member的地址   LeaderStateChanged 用于说明follower拥有不同的leader   ShardRoleChanged 用于说明一个Shard的角色发生变化        d) 默认90s超时，但可配置
e) block config sub-system?</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/ovs/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/ovs/</guid>
      <description> OVS笔记 安装 # 更新 apt-get update # 移除bridge rmmod bridge * 关闭bridge模块。可先通过lsmod | grep bridge 查看，然后用rmmod bridge关闭，若出现bridge正在被另一模块使用导致无法关闭的错误，则需要先关闭正在使用bridge的模块。 # 安装OVS apt-get install openvswitch-switch # 查看安装结果 ovs-vsctl show</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/postgres%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/postgres%E4%BF%A1%E6%81%AF%E6%9F%A5%E8%AF%A2/</guid>
      <description>Ansible部署系统监控功能 Ansible postgresql管理模块 postgresql_copy – Copy data between a file/program and a PostgreSQL table postgresql_db – Add or remove PostgreSQL databases from a remote host postgresql_ext – Add or remove PostgreSQL extensions from a database postgresql_idx – Create or drop indexes from a PostgreSQL database postgresql_info – Gather information about PostgreSQL servers postgresql_lang – Adds, removes or changes procedural languages with a PostgreSQL database postgresql_membership – Add or remove PostgreSQL roles from groups postgresql_owner – Change an owner of PostgreSQL database object postgresql_ping – Check remote PostgreSQL server availability postgresql_privs – Grant or revoke privileges on PostgreSQL database objects postgresql_publication – Add, update, or remove PostgreSQL publication postgresql_query – Run PostgreSQL queries postgresql_schema – Add or remove PostgreSQL schema postgresql_sequence – Create, drop, or alter a PostgreSQL sequence postgresql_set – Change a PostgreSQL server configuration parameter postgresql_slot – Add or remove replication slots from a PostgreSQL database postgresql_table – Create, drop, or modify a PostgreSQL table postgresql_tablespace – Add or remove PostgreSQL tablespaces from remote hosts postgresql_user – Add or remove a user (role) from a PostgreSQL server instance</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/python/</guid>
      <description>Python学习笔记 pip安装包所在路径查看 有时候pip安装后，不知道python包被安装到何处，可以调用如下命令查看python系统路径帮助排查
pip -m site Python标识符命名规则 标识符：用于变量、函数、类、模块等的名称。 一般有如下规则：
1. 区分大小写 2. 第一个字符必须是字母、下划线，其余字符是字母、数字、下划线 3. 不能使用关键字，关键字查询IDLE-&amp;gt;help()-&amp;gt;keywords 4. 以双下划线开头和结尾的名称通常含有特殊含义，尽量避免，如__init__ 如下是约定俗称的命名规则：
   类型 规则 例子     模块和包名 全小写字母，尽量简单，若多个单词之间用下划线 math,os,sys   函数名 全小写，多个单词之间用下划线隔开 phone, my_name   类名 首字母大写，采用驼峰原则，多个单词之间每个单词第一个字母大写，其余部分小写 MyPhone, MyClass, Phone   常量名 全大写字母，多个单词使用下划线隔开 SPEED, MAX_SPEED    Python运算符    运算符 说明 例子 结果     + 加法 3+2 5   - 减法 3-2 1   * 乘法 3*2 6   / 除法 3&amp;frasl;2 1.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/readme/</guid>
      <description>island Kubernetes，Helms and other notes.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/%E5%AE%9E%E9%AA%8C%E7%8E%AF%E5%A2%83/</guid>
      <description>服务器信息  git服务器信息
10.190.49.96 su: mano2017 mano：mano2017 git: jiangxing dev:12 gerrit平台: gerrit 123321 gitlab平台: gerrit 12344321 
 vCenter登陆
IP: 10.190.49.50 用户： administrator@vsphere.local 密码： `1Qazxcv 
 VNF csar包制作服务器
wcl/wcl 10.190.3.198 user/user 10.190.3.71 
 小站
IP： 10.190.49.55：5555 用户： ghost@ghost.com 密码： manomano2017 
 docker仓库
IP： 10.190.49.56:8081   招聘
智联 wlccx002 developIPRAN002 猎聘 wlccx2 developIPRAN   部门代码审查报告地址
http://10.90.6.59:81/svn/FOSV3R1/fosv3_testcase/Code/code-review 没有用户名的,可以把svn账号发给曹松波. 他帮忙建立账号 账号：wt 密码123 
 服务器上网
上网账号
curl -d &amp;#34;login_type=login&amp;amp;username=dssun5812&amp;amp;password=S%22%3Bz%BD%BC%3F%3E%91+%B3r&amp;#34; http://202.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/%E8%8E%B7%E5%8F%96docker%E5%AE%B9%E5%99%A8%E5%AE%BF%E4%B8%BB%E6%9C%BAveth%E5%8F%A3/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/%E8%8E%B7%E5%8F%96docker%E5%AE%B9%E5%99%A8%E5%AE%BF%E4%B8%BB%E6%9C%BAveth%E5%8F%A3/</guid>
      <description>获取docker容器对应的宿主机veth*接口 具体思路  查看容器内eth0的iflink接口索引
docker exec -it ${container_info} bash -c &amp;#39;cat /sys/class/net/eth0/iflink&amp;#39;  注： &amp;gt;&amp;gt; container_info可以是docker容器名称或者docker容器id &amp;gt;&amp;gt; 该命令返回一个iflink索引值，例如791
 搜索宿主机veth接口
grep -l 791 /sys/class/net/veth*/ifindex  注： &amp;gt;&amp;gt; 该命令返回一个目录路径，”/sys/class/net/vethae7eed8/ifindex“
 截取目录路径中veth*部分的字符
sed -e &amp;#39;s;^.*net/\(.*\)/ifindex$;\1  shell脚本 #!/bin/bash for container in $(docker ps -q) do iflink=`docker exec -it $container bash -c &amp;#39;cat /sys/class/net/eth0/iflink&amp;#39;` # 打印结果并删除windows文件造成的^M字符 # tr命令为翻译字符命令 iflink=`echo $iflink|tr -d &amp;#39;\r&amp;#39;` veth=`grep -l $iflink /sys/class/net/veth*/ifindex` veth=`echo $veth|sed -e &amp;#39;s;^.*net/\(.*\)/ifindex$;\1;&amp;#39;` echo $container:$veth done 压缩成一行,命令行中执行：</description>
    </item>
    
    <item>
      <title></title>
      <link>https://vincent-wuhan.github.io/todo/%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AEpostgres%E5%AE%B9%E5%99%A8%E6%B5%81%E9%87%8F%E4%B8%8D%E9%80%9A%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://vincent-wuhan.github.io/todo/%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AEpostgres%E5%AE%B9%E5%99%A8%E6%B5%81%E9%87%8F%E4%B8%8D%E9%80%9A%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</guid>
      <description>容器部署Postgres数据库开放端口映射远程访问遇到的坑 需求场景 默认ansible-awx部署ansible-tower时，是不开放postgres端口5432映射到宿主机的。为了远程访问tower的数据库postgres，在部署完后，手动更改docker-compose文件，添加如下端口映射
ports: - &amp;#34;5432&amp;#34;:&amp;#34;5432&amp;#34; 然后在docker-compose文件同级目录下，重新执行命令更新容器
docker-compose up -d 期望结果 以宿主机IP为192.168.100.23, 容器IP地址为172.31.0.2为例，正常情况使用psql -h 192.168.100.23 -U awx可登陆postgres数据库
但此时却遇到一个坑，不知是否与docker-compose版本有关，在此记录备案.
现象说明 &amp;ldquo;psql -h localhost -U awx&amp;rdquo;和&amp;rdquo;psql -h 172.31.0.2 -U awx&amp;rdquo;可以登陆数据库成功，&amp;rdquo;psql -h 192.168.100.23 -U awx&amp;rdquo;登陆数据失败
问题排查过程  确认docker容器映射正常
# docker ps|grep awx-postgres $ docker ps CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES a0d0a4d205f0 postgres:10 &amp;#34;docker-entrypoint.s…&amp;#34; 7 seconds ago Up 6 seconds 0.0.0.0:5432-&amp;gt;5432/tcp awx_postgres  查看5432端口也被正常监听
# netstat -apn|grep 5432 tcp6 0 0 :::5432 :::* LISTEN 1650/docker-proxy # ps aux|grep 5432 root 1650 0.</description>
    </item>
    
  </channel>
</rss>